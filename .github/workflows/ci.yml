on: [push, pull_request]

name: CI (Android, iOS)

jobs:
  build:
    name: Compile and Build (Android, iOS)
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm/10.0
          key: ${{ runner.os }}-cached-llvm-10.0

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '10.0'
          directory: ${{ runner.temp }}/llvm/10.0
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Cargo Make
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: install
          args: cargo-make

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      - name: Run Flutter pub get
        run: flutter pub get

      - name: Set up JDK 1.8 (Android only)
        uses: actions/setup-java@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          java-version: 1.8

      - name: Setup Android SDK (Android only)
        if: matrix.os == 'ubuntu-latest'
        uses: android-actions/setup-android@v1

      - name: Cache NDK (Android only)
        if: matrix.os == 'ubuntu-latest'
        id: cache-ndk
        uses: actions/cache@v2
        with:
          path: /home/runner/android/ndk-bundle
          key: ${{ runner.os }}-ndk

      - name: Install Android NDK (Android only)
        if: steps.cache-ndk.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
        run: $ANDROID_SDK_ROOT/tools/bin/sdkmanager ndk-bundle

      - name: Set Android NDK Env (Android only)
        if: matrix.os == 'ubuntu-latest'
        run: echo '::set-env name=ANDROID_NDK_HOME::/home/runner/android/ndk-bundle'

      - name: Install Android Targets (Android only)
        if: matrix.os == 'ubuntu-latest'
        run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

      - name: Run cargo make android
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: make
          args: android

      - name: Build APK (Fat, Debug)
        if: matrix.os == 'ubuntu-latest'
        run: flutter build apk --debug

      - name: Install iOS Targets (iOS only)
        if: matrix.os == 'macos-latest'
        run: rustup target add aarch64-apple-ios x86_64-apple-ios

      - name: Run cargo make ios
        if: matrix.os == 'macos-latest'
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: make
          args: ios

      - name: Build iOS App (Simulator, Debug)
        if: matrix.os == 'macos-latest'
        run: flutter build ios --debug --no-codesign --simulator

      - name: Create Release (Android)
        id: create_release
        if: matrix.os == 'ubuntu-latest'
        uses: ChanTsune/release-with-commit@v1.0.0
        with:
          regexp: "Release (\\d+([.]\\d+)*)\n*((\\s|\\S)+)"
          regexp_options: 'us'
          release_name: 'version $1'
          tag_name: 'v$1'
          body: '$3'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: '${{secrets.GITHUB_TOKEN}}'

      - name: Upload Release (Android)
        id: upload-release-asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-debug.apk
          asset_name: apk-debug.apk
          asset_content_type: application/octet-stream
