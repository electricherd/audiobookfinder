on: [push, pull_request]
# all from flutterust MIT licensed
#

# name is (urlencode) connected to README.md svg badge (change it there as well)
name: Android Build

jobs:
  build:
    name: Compile and Build - Android
    runs-on: ubuntu-latest
    steps:
      # #################### build conditions
      - id: tagger
        uses: digital-ai/query-tag-action@v2
        with:
          include: 'v*'

      - name: condition tagged
        id: cond_tagged_release
        # https://github.com/marketplace/actions/get-the-upload-url-for-a-release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: condition Release
        id: cond_release_text
        # https://github.com/marketplace/actions/release-with-commit
        uses: ChanTsune/release-with-commit@v1.0.0
        with:
          regexp: "(\\d+([.]\\d+)*)\n*((\\s|\\S)+)Release(\\d+([.]\\d+)*)\n*((\\s|\\S)+)"
          regexp_options: "us"
          release_name: "version $1"
          tag_name: "v$1"
          body: "$3"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set env
        run: echo ::set-env name=MY_VERSION::$(echo ${GITHUB_REF:11})

      - run: echo ${{ steps.cond_release_text.outputs.upload_url }}
      - run: echo ${{ steps.cond_tagged_release.outputs.tag_name }}
      - run: echo ${{ github.event.release.upload_url }}
      - run: echo ${{ steps.tagger.tag }}
      - run: echo $MY_VERSION

      # ##################### setup build environment
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm/10.0
          key: ${{ runner.os }}-cached-llvm-10.0

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '10.0'
          directory: ${{ runner.temp }}/llvm/10.0
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Install WASM Target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target/aarch64-linux-android
            target/armv7-linux-androideabi
            target/x86_64-linux-android
            target/i686-linux-android
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Cargo Make
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: install
          args: cargo-make

      - name: Install Cargo Tools (cbindgen, v0.14.4)
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: install
          args: cbindgen --version 0.14.4

      - name: Install Cargo Tools (dart-bindgen)
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: install
          args: dart-bindgen --features cli

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      - name: Run Flutter pub get
        run: flutter pub get

      - name: Set up JDK 1.8 (Android only)
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup Android SDK (Android only)
        uses: android-actions/setup-android@v1

      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v2
        with:
          path: /home/runner/android/ndk-bundle
          key: ${{ runner.os }}-ndk

      - name: Install Android NDK (Android only)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: $ANDROID_SDK_ROOT/tools/bin/sdkmanager ndk-bundle

      - name: Set Android NDK Env
        run: echo '::set-env name=ANDROID_NDK_HOME::/home/runner/android/ndk-bundle'

      - name: Install Android Targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

      # ############### Release/Debug build dependent
      - name: Run cargo make android - Debug
        if: steps.cond_release_text.outputs.upload_url == null && steps.cond_tagged_release.outputs.tag_name == null
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: make
          args: android-dev

      - name: Build APK (x86_64, Debug)
        if: steps.cond_release_text.outputs.upload_url == null && steps.cond_tagged_release.outputs.tag_name == null
        run: flutter build apk --debug

      - name: Run cargo make android - Release
        if: steps.cond_release_text.outputs.upload_url != null || steps.cond_tagged_release.outputs.tag_name != null
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: make
          args: android-arm --profile release

      - name: Build APK (arm64, Release)
        if: steps.cond_release_text.outputs.upload_url != null || steps.cond_tagged_release.outputs.tag_name != null
        run: flutter build apk --release --target-platform android-arm64

      # ####################### upload release dependent and release in text or tagged
      - name: Upload Release - Release in text
        id: upload-release-text-asset
        if: steps.cond_release_text.outputs.upload_url != null && steps.cond_tagged_release.outputs.tag_name == null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cond_release_text.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: adbfflutter-arm64.apk
          asset_content_type: application/octet-stream

      - name: Upload Release - Release with tag
        id: upload-release-tagged-asset
        if: steps.cond_tagged_release.outputs.tag_name != null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: adbfflutter-${{ steps.cond_tagged_release.outputs.tag_name }}-arm64.apk
          asset_content_type: application/octet-stream
