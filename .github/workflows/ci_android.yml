on: [push, pull_request]
# all from flutterust MIT licensed
#

# name is (urlencode) connected to README.md svg badge (change it there as well)
name: Android Build

jobs:
  build:
    name: Compile and Build - Android
    runs-on: ubuntu-latest
    steps:
      # use to your like https://github.com/marketplace?type=actions
      # #################### build conditions
      - name: vtag variable
        shell: bash
        run: echo "vtag=$(echo ${GITHUB_REF#refs/tags/} | awk '/v([0-9]+\.)+[0-9]+/{print $0}')" >> $GITHUB_ENV

      - name: Extractor for vtag env
        id: extract_tag
        shell: bash
        run: echo "##[set-output name=tag;]${{ env.vtag }}"

      - name: Release
        if: steps.extract_tag.outputs.tag != null
        shell: bash
        run: echo "Building release"

      # ##################### setup build environment
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm/10.0
          key: ${{ runner.os }}-cached-llvm-10.0

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '10.0'
          directory: ${{ runner.temp }}/llvm/10.0
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Install WASM Target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target/aarch64-linux-android
            target/armv7-linux-androideabi
            target/x86_64-linux-android
            target/i686-linux-android
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Cargo Make (v0.32)
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-make
          version: ^0.32

      - name: Install Cargo Tools (cbindgen, v0.15)
        uses: actions-rs/install@v0.1
        with:
          crate: cbindgen
          version: ^0.15

      - name: Install Cargo Tools (dart-bindgen, v0.1)
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: install
          args: dart-bindgen --features cli --version ^0.1

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      - name: Run Flutter pub get
        run: flutter pub get

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup Android SDK
        uses: android-actions/setup-android@v1

      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v2
        with:
          path: /home/runner/android/ndk-bundle
          key: ${{ runner.os }}-ndk

      - name: Install Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: $ANDROID_SDK_ROOT/tools/bin/sdkmanager ndk-bundle

      - name: Set Android NDK Env
        run: echo "ANDROID_NDK_HOME=/home/runner/android/ndk-bundle" >> $GITHUB_ENV

      - name: Install Android Targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

      # ############### Release/Debug build dependent
      - name: Run cargo make android - Debug
        if: steps.extract_tag.outputs.tag == null
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: make
          args: android-dev

      - name: Build APK (x86_64, Debug)
        if: steps.extract_tag.outputs.tag == null
        run: flutter build apk --debug

      - name: Run cargo make android - Release
        if: steps.extract_tag.outputs.tag != null
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: make
          args: android-arm --profile release

      # help from https://dev.to/cddelta/signing-flutter-android-apps-for-release-in-github-actions-2892
      - name: Create Key from github secret for Release
        if: steps.extract_tag.outputs.tag != null
        run: echo ${{ secrets.SIGNING_KEY }} | base64 -d > android/key.jks

      # https://flutter.dev/docs/deployment/android#signing-the-app
      - name: Build APK (arm64, Release)
        if: steps.extract_tag.outputs.tag != null
        # https://flutter.dev/docs/perf/app-size
        run: flutter build apk --release --target-platform android-arm64 --obfuscate --split-debug-info=build/dart-debug-info/${{ steps.extract_tag.outputs.tag }}/android
        env:
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.ALIAS }}
          KEY_PATH: android/key.jks

      # ####################### upload intermediate result dependent if release in text or tagged

      # https://github.com/marketplace/actions/upload-files-to-a-github-release
      - name: Upload Release Asset
        if: steps.extract_tag.outputs.tag != null
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: adbfflutter-${{ steps.extract_tag.outputs.tag }}-arm64.apk
          tag: ${{ steps.extract_tag.outputs.tag }}
          overwrite: true
