version: "{build}"

environment:
  global:
    CRATE_NAME: audiobookfinder
    UBUNTU_VER: LTS_18.04
  matrix:
    - platform: x64
      image: Ubuntu1804
      configuration: Release
      TARGET: x86_64-unknown-linux-gnu
      CHANNEL: stable      
    - platform: x64
      image: Ubuntu1804    
      configuration: Debug
      TARGET: x86_64-unknown-linux-gnu
      CHANNEL: stable      
    - platform: x64
      image: Visual Studio 2017
      configuration: Release
      TARGET: i686-pc-windows-msvc
      CHANNEL: stable      

# build configuration, i.e. Debug, Release, etc.

cache:
  - '.cargo'

# scripts that are called at very beginning, before repo cloning
# ACCEPT_EULA for some windows packages .. whatever
init:
  - sh: sudo apt-get update
# comment next line for quick build
#  - sh: sudo DEBIAN_FRONTEND=noninteractive ACCEPT_EULA=Y apt-get upgrade -yq
  - sh: sudo apt-get --yes install build-essential
  - sh: sudo apt-get --yes install libavahi-compat-libdnssd-dev
  - sh: sudo apt-get --yes install libsodium-dev
  - sh: sudo apt-get --yes install libtag1-dev libtagc0-dev
#  for deployment
  - sh: sudo apt-get --yes install p7zip-full upx-ucl

# scripts that run after cloning repository
install:
  - sh: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ./rustup.sh
  - sh: sh ./rustup.sh -y 
# for debugging: ls -al
  - sh: source $HOME/.cargo/env
# it's a clean install so not needed: rustup update
# comment next line for quick build
#  - sh: rustup toolchain install nightly
  - sh: rustup target install $TARGET
  # ps (powershell should only be triggered with windows build)
  - cmd: curl -sSf -o rustup-init.exe https://win.rustup.rs
  - cmd: rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y
  - cmd: set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - cmd: rustc -Vv
  - cmd: cargo -V  


build_script:
# comment next line for quick build
#  - cargo build
  - cargo build --release --target $TARGET  

test_script:
# comment next lines for quick build  
#  - cargo run --release --target $TARGET -- testaudio
#  - cargo test --release --target $TARGET
#  - ./target/$TARGET/release/$CRATE_NAME -- testaudio

artifacts:
  - path: target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET.7z
    name: zippedFiles

  - path: target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET.7z.sha1
    name: sha1checksum


after_build:
  - sh: cp target/$TARGET/release/$CRATE_NAME target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET
  - sh: strip -s target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET -o target/release/$CRATE_NAME
  # upx yet disabled since causes segmentation faults
  #- strip -s target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET \
  #        -o target/release/$CRATE_NAME.stripped
  #- upx --ultra-brute target/release/$CRATE_NAME.stripped \
  #       -o target/release/$CRATE_NAME
  - sh: 7z a -r target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET.7z ./target/release/$CRATE_NAME ./README-release.md ./LICENSE
  - sh: sha1sum target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET.7z > target/release/$CRATE_NAME-$UBUNTU_VER-$TARGET.7z.sha1

deploy:
  provider: GitHub
  artifact: 
    -'zippedFiles'
    -'sha1checksum'
  auth_token:
    # yes this is encrypted/signed by appveyor (from the github token)
    secure: aT3Xjbg4GSAJtYjhk7SrC1RInLV28rI6e64he6JClx2W09nToXvPyHr/zXc0tqPj
  draft: false
  prerelease: false
  on:
    branch: master                # release from master branch only
    APPVEYOR_REPO_TAG: true       # deploy on tag push only
    platform: x64
